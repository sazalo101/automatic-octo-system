{"version":3,"sources":["../../src/internal/experimental.ts"],"sourcesContent":["import { AptosConfig } from \"../api/aptosConfig\";\nimport { generateViewFunctionPayload, InputViewFunctionData } from \"../transactions\";\nimport { LedgerVersionArg, MimeType } from \"../types\";\nimport { Serializer } from \"../bcs\";\nimport { postBinaryAptosFullNode } from \"../client\";\n\nexport async function viewBinary(args: {\n  aptosConfig: AptosConfig;\n  payload: InputViewFunctionData;\n  options?: LedgerVersionArg & { convert?: undefined };\n}): Promise<Uint8Array>;\n\nexport async function viewBinary<T extends {}>(args: {\n  aptosConfig: AptosConfig;\n  payload: InputViewFunctionData;\n  options?: LedgerVersionArg & { convert?: (input: Uint8Array) => T };\n}): Promise<T>;\n\n/**\n * Reads a binary view function, and converts into the appropriate type if a converter is provided.\n * @experimental\n * @param args\n */\nexport async function viewBinary<T extends {} = Uint8Array>(args: {\n  aptosConfig: AptosConfig;\n  payload: InputViewFunctionData;\n  options?: LedgerVersionArg & { convert?: (input: Uint8Array) => T };\n}): Promise<Uint8Array | T> {\n  const { aptosConfig, payload, options } = args;\n  const viewFunctionPayload = await generateViewFunctionPayload({\n    ...payload,\n    aptosConfig,\n  });\n\n  const serializer = new Serializer();\n  viewFunctionPayload.serialize(serializer);\n  const bytes = serializer.toUint8Array();\n\n  const { data } = await postBinaryAptosFullNode<Uint8Array>({\n    aptosConfig,\n    path: \"view\",\n    originMethod: \"view\",\n    contentType: MimeType.BCS_VIEW_FUNCTION,\n    acceptType: MimeType.BCS,\n    params: { ledger_version: options?.ledgerVersion },\n    body: bytes,\n  });\n\n  const array = new Uint8Array(data);\n  if (options?.convert) {\n    return options.convert(array);\n  }\n\n  return array;\n}\n"],"mappings":"2HAuBA,eAAsBA,EAAsCC,EAIhC,CAC1B,GAAM,CAAE,YAAAC,EAAa,QAAAC,EAAS,QAAAC,CAAQ,EAAIH,EACpCI,EAAsB,MAAMC,EAA4B,CAC5D,GAAGH,EACH,YAAAD,CACF,CAAC,EAEKK,EAAa,IAAIC,EACvBH,EAAoB,UAAUE,CAAU,EACxC,IAAME,EAAQF,EAAW,aAAa,EAEhC,CAAE,KAAAG,CAAK,EAAI,MAAMC,EAAoC,CACzD,YAAAT,EACA,KAAM,OACN,aAAc,OACd,oDACA,+BACA,OAAQ,CAAE,eAAgBE,GAAS,aAAc,EACjD,KAAMK,CACR,CAAC,EAEKG,EAAQ,IAAI,WAAWF,CAAI,EACjC,OAAIN,GAAS,QACJA,EAAQ,QAAQQ,CAAK,EAGvBA,CACT","names":["viewBinary","args","aptosConfig","payload","options","viewFunctionPayload","generateViewFunctionPayload","serializer","Serializer","bytes","data","postBinaryAptosFullNode","array"]}