{"version":3,"sources":["../../src/api/account/abstraction.ts"],"sourcesContent":["import { AccountAddress, AccountAddressInput } from \"../../core\";\nimport {\n  addAuthenticationFunctionTransaction,\n  removeAuthenticationFunctionTransaction,\n  removeDispatchableAuthenticatorTransaction,\n} from \"../../internal/abstraction\";\nimport { view } from \"../../internal/view\";\nimport { InputGenerateTransactionOptions, TypeTagAddress } from \"../../transactions\";\nimport { MoveFunctionId } from \"../../types\";\nimport { getFunctionParts } from \"../../utils/helpers\";\nimport { AptosConfig } from \"../aptosConfig\";\n\nexport class AccountAbstraction {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Adds a dispatchable authentication function to the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.addAuthenticationFunctionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn =  await aptos.signAndSubmitTransaction({ signer: alice, transaction});\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to add the authentication function to.\n   * @param args.authenticationFunction - The authentication function info to add.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to add the authentication function to the account.\n   */\n  public async addAuthenticationFunctionTransaction(args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, authenticationFunction, options } = args;\n    return addAuthenticationFunctionTransaction({\n      aptosConfig: this.config,\n      authenticationFunction,\n      sender: accountAddress,\n      options,\n    });\n  }\n\n  /**\n   * Removes a dispatchable authentication function from the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.removeAuthenticationFunctionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to remove the authentication function from.\n   * @param args.authenticationFunction - The authentication function info to remove.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to remove the authentication function from the account.\n   */\n  public async removeAuthenticationFunctionTransaction(args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, authenticationFunction, options } = args;\n    return removeAuthenticationFunctionTransaction({\n      aptosConfig: this.config,\n      sender: accountAddress,\n      authenticationFunction,\n      options,\n    });\n  }\n\n  /**\n   * Removes a dispatchable authenticator from the account.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.removeDispatchableAuthenticatorTransaction({\n   *   accountAddress: alice.accountAddress,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to remove the authenticator from.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to remove the authenticator from the account.\n   */\n  public async removeDispatchableAuthenticatorTransaction(args: {\n    accountAddress: AccountAddressInput;\n    options?: InputGenerateTransactionOptions;\n  }) {\n    const { accountAddress, options } = args;\n    return removeDispatchableAuthenticatorTransaction({ aptosConfig: this.config, sender: accountAddress, options });\n  }\n\n  /**\n   * Gets the dispatchable authentication function for the account.\n   *\n   * @example\n   * ```ts\n   * const functionInfos = await aptos.abstraction.getAuthenticationFunction({\n   *   accountAddress: alice.accountAddress,\n   * });\n   *\n   * if (functionInfos) {\n   *   console.log(`Account ${alice.accountAddress.toString()} is using account abstraction!`);\n   * } else {\n   *   console.log(`Account ${alice.accountAddress.toString()} is not using account abstraction.`);\n   * }\n   * ```\n   *\n   * @param args.accountAddress - The account to get the dispatchable authentication function for.\n   * @returns The dispatchable authentication function for the account.\n   */\n  public async getAuthenticationFunction(args: { accountAddress: AccountAddressInput }) {\n    const { accountAddress } = args;\n    const [{ vec: functionInfoOption }] = await view<\n      [{ vec: { function_name: string; module_name: string; module_address: string }[][] }]\n    >({\n      aptosConfig: this.config,\n      payload: {\n        function: \"0x1::account_abstraction::dispatchable_authenticator\",\n        functionArguments: [AccountAddress.from(accountAddress)],\n        abi: { typeParameters: [], parameters: [new TypeTagAddress()], returnTypes: [] },\n      },\n    });\n\n    if (functionInfoOption.length === 0) return undefined;\n\n    return functionInfoOption[0].map((functionInfo) => ({\n      moduleAddress: AccountAddress.fromString(functionInfo.module_address),\n      moduleName: functionInfo.module_name,\n      functionName: functionInfo.function_name,\n    }));\n  }\n\n  /**\n   * Will return true if the account is abstracted, otherwise false.\n   *\n   * @example\n   * ```ts\n   * const isAccountAbstractionEnabled = await aptos.abstraction.isAccountAbstractionEnabled({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   * if (isAccountAbstractionEnabled) {\n   *   console.log(`Account ${alice.accountAddress.toString()} is using account abstraction!`);\n   * } else {\n   *   console.log(`Account ${alice.accountAddress.toString()} is not using account abstraction.`);\n   * }\n   * ```\n   *\n   * @param args.accountAddress - The account to check.\n   * @returns Whether the account is abstracted.\n   */\n  public isAccountAbstractionEnabled = async (args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction: string;\n  }) => {\n    const functionInfos = await this.getAuthenticationFunction(args);\n    const { moduleAddress, moduleName, functionName } = getFunctionParts(args.authenticationFunction as MoveFunctionId);\n    return (\n      functionInfos?.some(\n        (functionInfo) =>\n          AccountAddress.fromString(moduleAddress).equals(functionInfo.moduleAddress) &&\n          moduleName === functionInfo.moduleName &&\n          functionName === functionInfo.functionName,\n      ) ?? false\n    );\n  };\n\n  /**\n   * Creates a transaction to enable account abstraction with the given authentication function.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.enableAccountAbstractionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `{alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to enable account abstraction for.\n   * @param args.authenticationFunction - The authentication function info to use.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to enable account abstraction for the account.\n   */\n  public enableAccountAbstractionTransaction = this.addAuthenticationFunctionTransaction;\n\n  /**\n   * Creates a transaction to disable account abstraction. If an authentication function is provided, it will specify to\n   * remove the authentication function.\n   *\n   * @example\n   * ```ts\n   * const txn = await aptos.abstraction.disableAccountAbstractionTransaction({\n   *   accountAddress: alice.accountAddress,\n   *   authenticationFunction: `${alice.accountAddress}::any_authenticator::authenticate`,\n   * });\n   *\n   * const txn = await aptos.signAndSubmitTransaction({ signer: alice, transaction: txn });\n   * await aptos.waitForTransaction({ transactionHash: txn.hash });\n   * ```\n   *\n   * @param args.accountAddress - The account to disable account abstraction for.\n   * @param args.authenticationFunction - The authentication function info to remove.\n   * @param args.options - The options for the transaction.\n   * @returns A transaction to disable account abstraction for the account.\n   */\n  public disableAccountAbstractionTransaction = async (args: {\n    accountAddress: AccountAddressInput;\n    authenticationFunction?: string;\n    options?: InputGenerateTransactionOptions;\n  }) => {\n    const { accountAddress, authenticationFunction, options } = args;\n    if (authenticationFunction) {\n      return this.removeAuthenticationFunctionTransaction({\n        accountAddress,\n        authenticationFunction,\n        options,\n      });\n    }\n    return this.removeDispatchableAuthenticatorTransaction({ accountAddress, options });\n  };\n}\n"],"mappings":"2NAYO,IAAMA,EAAN,KAAyB,CAC9B,YAAqBC,EAAqB,CAArB,YAAAA,EAyJrB,KAAO,4BAA8B,MAAOC,GAGtC,CACJ,IAAMC,EAAgB,MAAM,KAAK,0BAA0BD,CAAI,EACzD,CAAE,cAAAE,EAAe,WAAAC,EAAY,aAAAC,CAAa,EAAIC,EAAiBL,EAAK,sBAAwC,EAClH,OACEC,GAAe,KACZK,GACCC,EAAe,WAAWL,CAAa,EAAE,OAAOI,EAAa,aAAa,GAC1EH,IAAeG,EAAa,YAC5BF,IAAiBE,EAAa,YAClC,GAAK,EAET,EAqBA,KAAO,oCAAsC,KAAK,qCAsBlD,KAAO,qCAAuC,MAAON,GAI/C,CACJ,GAAM,CAAE,eAAAQ,EAAgB,uBAAAC,EAAwB,QAAAC,CAAQ,EAAIV,EAC5D,OAAIS,EACK,KAAK,wCAAwC,CAClD,eAAAD,EACA,uBAAAC,EACA,QAAAC,CACF,CAAC,EAEI,KAAK,2CAA2C,CAAE,eAAAF,EAAgB,QAAAE,CAAQ,CAAC,CACpF,CAhO2C,CAqB3C,MAAa,qCAAqCV,EAI/C,CACD,GAAM,CAAE,eAAAQ,EAAgB,uBAAAC,EAAwB,QAAAC,CAAQ,EAAIV,EAC5D,OAAOW,EAAqC,CAC1C,YAAa,KAAK,OAClB,uBAAAF,EACA,OAAQD,EACR,QAAAE,CACF,CAAC,CACH,CAqBA,MAAa,wCAAwCV,EAIlD,CACD,GAAM,CAAE,eAAAQ,EAAgB,uBAAAC,EAAwB,QAAAC,CAAQ,EAAIV,EAC5D,OAAOY,EAAwC,CAC7C,YAAa,KAAK,OAClB,OAAQJ,EACR,uBAAAC,EACA,QAAAC,CACF,CAAC,CACH,CAmBA,MAAa,2CAA2CV,EAGrD,CACD,GAAM,CAAE,eAAAQ,EAAgB,QAAAE,CAAQ,EAAIV,EACpC,OAAOa,EAA2C,CAAE,YAAa,KAAK,OAAQ,OAAQL,EAAgB,QAAAE,CAAQ,CAAC,CACjH,CAqBA,MAAa,0BAA0BV,EAA+C,CACpF,GAAM,CAAE,eAAAQ,CAAe,EAAIR,EACrB,CAAC,CAAE,IAAKc,CAAmB,CAAC,EAAI,MAAMC,EAE1C,CACA,YAAa,KAAK,OAClB,QAAS,CACP,SAAU,uDACV,kBAAmB,CAACR,EAAe,KAAKC,CAAc,CAAC,EACvD,IAAK,CAAE,eAAgB,CAAC,EAAG,WAAY,CAAC,IAAIQ,CAAgB,EAAG,YAAa,CAAC,CAAE,CACjF,CACF,CAAC,EAED,GAAIF,EAAmB,SAAW,EAElC,OAAOA,EAAmB,CAAC,EAAE,IAAKR,IAAkB,CAClD,cAAeC,EAAe,WAAWD,EAAa,cAAc,EACpE,WAAYA,EAAa,YACzB,aAAcA,EAAa,aAC7B,EAAE,CACJ,CA6FF","names":["AccountAbstraction","config","args","functionInfos","moduleAddress","moduleName","functionName","getFunctionParts","functionInfo","AccountAddress","accountAddress","authenticationFunction","options","addAuthenticationFunctionTransaction","removeAuthenticationFunctionTransaction","removeDispatchableAuthenticatorTransaction","functionInfoOption","view","TypeTagAddress"]}