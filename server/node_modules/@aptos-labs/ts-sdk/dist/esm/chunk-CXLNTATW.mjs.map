{"version":3,"sources":["../../src/api/experimental.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { LedgerVersionArg } from \"../types\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { InputViewFunctionData } from \"../transactions\";\nimport { viewBinary } from \"../internal/experimental\";\n\n/**\n * A class to have experimental functionality to the SDK.  Anything used here is subject to change.\n * @group Experimental\n * @experimental\n */\nexport class Experimental {\n  /**\n   * Initializes a new instance of the Aptos client with the provided configuration.\n   *\n   * @param config - The configuration settings for the Aptos client.\n   * @param config.network - The network to connect to (e.g., Testnet, Mainnet).\n   * @param config.nodeUrl - The URL of the Aptos node to connect to.\n   * @param config.faucetUrl - The URL of the faucet to use for funding accounts.\n   *\n   * @example\n   * ```typescript\n   * import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\n   *\n   * async function runExample() {\n   *     // Create a new Aptos client with Testnet configuration\n   *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your own network if needed\n   *     const aptos = new Aptos(config);\n   *\n   *     console.log(\"Aptos client initialized:\", aptos);\n   * }\n   * runExample().catch(console.error);\n   * ```\n   * @group Experimental\n   * @experimental\n   */\n  constructor(readonly config: AptosConfig) {}\n\n  async viewBinary(args: {\n    payload: InputViewFunctionData;\n    options?: LedgerVersionArg & { convert?: undefined };\n  }): Promise<Uint8Array>;\n  async viewBinary<T extends {}>(args: {\n    payload: InputViewFunctionData;\n    options: LedgerVersionArg & { convert: (input: Uint8Array) => T };\n  }): Promise<T>;\n\n  /**\n   * Returns BCS encoded results of the view function.  It can also convert the results to a specific type, if a\n   * converter is provided.\n   *\n   * @experimental\n   * @group Experimental\n   * @param args\n   */\n  async viewBinary<T extends {} = Uint8Array>(args: {\n    payload: InputViewFunctionData;\n    options?: LedgerVersionArg & { convert?: (input: Uint8Array) => T };\n  }): Promise<Uint8Array | T> {\n    return viewBinary<T>({ ...args, aptosConfig: this.config });\n  }\n}\n"],"mappings":"yCAaO,IAAMA,EAAN,KAAmB,CAyBxB,YAAqBC,EAAqB,CAArB,YAAAA,CAAsB,CAmB3C,MAAM,WAAsCC,EAGhB,CAC1B,OAAOC,EAAc,CAAE,GAAGD,EAAM,YAAa,KAAK,MAAO,CAAC,CAC5D,CACF","names":["Experimental","config","args","viewBinary"]}