import { LedgerVersionArg } from '../types/types.mjs';
import { AptosConfig } from './aptosConfig.mjs';
import { InputViewFunctionData } from '../transactions/types.mjs';
import '../types/indexer.mjs';
import '../types/generated/operations.mjs';
import '../types/generated/types.mjs';
import '../utils/apiEndpoints.mjs';
import '@aptos-labs/script-composer-pack';
import '../utils/const.mjs';
import '../bcs/serializable/moveStructs.mjs';
import '../bcs/serializable/movePrimitives.mjs';
import '../bcs/deserializer.mjs';
import '../bcs/serializer.mjs';
import '../core/hex.mjs';
import '../core/common.mjs';
import '../transactions/instances/transactionArgument.mjs';
import '../bcs/serializable/fixedBytes.mjs';
import '../core/accountAddress.mjs';
import '../publicKey-BMtGNNLg.mjs';
import '../core/crypto/signature.mjs';
import '../transactions/instances/rawTransaction.mjs';
import '../transactions/instances/chainId.mjs';
import '../transactions/instances/transactionPayload.mjs';
import '../transactions/instances/identifier.mjs';
import '../transactions/instances/moduleId.mjs';
import '../transactions/typeTag/index.mjs';
import '../transactions/authenticator/account.mjs';
import '../core/crypto/ed25519.mjs';
import '../core/crypto/privateKey.mjs';
import '../core/crypto/multiEd25519.mjs';
import '../core/crypto/multiKey.mjs';
import '../core/crypto/singleKey.mjs';
import '../core/crypto/secp256k1.mjs';
import '../transactions/instances/simpleTransaction.mjs';
import '../transactions/instances/multiAgentTransaction.mjs';

/**
 * A class to have experimental functionality to the SDK.  Anything used here is subject to change.
 * @group Experimental
 * @experimental
 */
declare class Experimental {
    readonly config: AptosConfig;
    /**
     * Initializes a new instance of the Aptos client with the provided configuration.
     *
     * @param config - The configuration settings for the Aptos client.
     * @param config.network - The network to connect to (e.g., Testnet, Mainnet).
     * @param config.nodeUrl - The URL of the Aptos node to connect to.
     * @param config.faucetUrl - The URL of the faucet to use for funding accounts.
     *
     * @example
     * ```typescript
     * import { Aptos, AptosConfig, Network } from "@aptos-labs/ts-sdk";
     *
     * async function runExample() {
     *     // Create a new Aptos client with Testnet configuration
     *     const config = new AptosConfig({ network: Network.TESTNET }); // Specify your own network if needed
     *     const aptos = new Aptos(config);
     *
     *     console.log("Aptos client initialized:", aptos);
     * }
     * runExample().catch(console.error);
     * ```
     * @group Experimental
     * @experimental
     */
    constructor(config: AptosConfig);
    viewBinary(args: {
        payload: InputViewFunctionData;
        options?: LedgerVersionArg & {
            convert?: undefined;
        };
    }): Promise<Uint8Array>;
    viewBinary<T extends {}>(args: {
        payload: InputViewFunctionData;
        options: LedgerVersionArg & {
            convert: (input: Uint8Array) => T;
        };
    }): Promise<T>;
}

export { Experimental };
